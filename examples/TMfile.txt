def swap(a, i, j) {
            tmp = a.get(i)
            a.put(i, a.get(j))
            a.put(j, tmp)
            return ()
        }

        def sort(numbers) {
            i = 0
            while (i < length(numbers)) {
                j = i+1
                while (j < numbers.length) {
                    if (numbers.get(i) > numbers.get(j)){
                        swap(numbers, i, j)
                        j = j + 1
                    }
                i = i + 1
                }
            }
            return ()
        }

        #TODO
        def main(args) {
            let numbers=[length(args)]
            i = 0
            while (i < args.length) {
                numbers.put(Integer.parseInt(args.get(i)), i)
                i = i + 1
            }
            sort(numbers)
            i = 0
            while (i < numbers.length) {
                print(numbers.get(i))
                i = i + 1
            }
            return ()
        }

def isPrime(number) {
            if (number <= 1) {return (false)}
            let prime = true
            let i = 2
            while (i < number && prime) {
                if (number%i == 0) {prime = false}
            i = i + 1
            }
            return (prime)
        }
        
        def main (args) {
            let N = Integer.parseInt(args.get(0))
            let current = 2
            let count = 0
            while (count < N) {
                if (isPrime(current)) {
                print(current)
                count = count + 1
                }
            current = current + 1
            }
        return ()}

def fizzbuzz(args) {
        let i = 1
        while (i <= 100) {
            if (i%15 == 0){
                print("FizzBuzz")
            } else {if (i % 3 == 0){
            print("Fizz")
            }
            else{ if (i % 5 == 0){
            print("Buzz")
            }
            else {
                print(i)
            }}}
            i = i + 1
        }
        return ()}   

def fib(a, b, N){
        if (N==0){
            return ()
        }
        print(a)
        return (fib(b, a+b, N-1))
        }    

def sum(a,b){
    return (a+b)
}

main{
    let a=sum(5,10)
    let b=sum(5.5,9.5)
    let c=sum("additioner"," des")
    let d=sum(c," Strings")
    print(a)
    print(b)
    print(c)
    print(d)
}

def equals (a, b) { return (a == b) }

main{
    let a = equals("text", "text")
    let b = equals(5, 5)
    let c = equals(new Pair(1,2), new Pair(1,2))
    }








----------------------------------------------------------------------------------------------------------------------








// This file showcases every single syntactic feature in the language.

fun array_add (a){
    fun add (a, b){
        return (add2(a, b))

        fun add2 (a, b){
            return (a + b)
        }
    }

    if (a.length == 0)
        return (0)

    let i = 1
    let result = a.get(0)

    while (i < a.length) {
        result = add(result, a.get(i))
        i = i + 1
    }

    return (result)
}

let total= array_add([1, 2, 3])
let float_total = total + 0.0

let math= 1 + 3 * 4 * (1 + 3) / 12
validate5(math)
validate5(6) // some men just want to watch the world burn

fun validate5(value)
{
    if (math != 5){
        print("It's a bug! We wanted 5 but got: " + math)
    }
    if (math > 5){
        print("It was too big.")
    }else{ if (math < 5){
            print("It was too small.")
        }else{
            print("It's just right.")
        }
    }
}

struct Pair {
    a=anInt
    b=anInt
}

let type = Pair
print(type + aString) 


fun sum_pair (pair){
    return (pair.a + pair.b)
}

validate5(sum_pair( new Pair(2, 3)))

fun use_array (array) {}

let intArray= []
let stringArray= []
use_array([])
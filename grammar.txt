// FONCTIONS

def nom_de_la_fonction (argument1, argument2, ...){
    statements;
    return ();
}

//STRUCTURES

struct nom_de_la_structure {
    identifier1 = value1;
    identifier2 = value2;
    ...
    identifierN = valueN;
}

//VARIABLES

let nom_de_la_variable = something; //dynamic (integer, string, char, double, boolean)

INTEGER : 0 ... 999
    OR INTEGER : parseInt(STRING) throw Exception

DOUBLE : 0.0

STRING : "abc"

//STATEMENTS

something;

IF : if (conditions) {statement;}
(ELSE : else {statement;})
WHILE : while (conditions) {statement;}
RETURN : return (something or nothing);
VARIABLE : let nom_de_la_variable = something;

//CONDITIONS

EQUIV : ==
NOT EQUIV : !=
AND : &&
OR : ||
NOT : !!

//ARRAYS

let nom_du_tableau = [longueur_du_tableau]
nom_du_tableau.index(INTEGER)

array nom_du_tableau [longueur_du_tableau]

//COMMENTAIRES

# commentaires #

//OPERATIONS

modulo : %
addition : +
soustraction : -
multiplication : *
division : /
(exposants : exp)

//PRINT

print(something);
rprint(error);

//ERRORS


//MAIN
main{}

//Tests
-----
struct P{x=aFloat; y=aFloat}

def abs(n){
    if(n>=0){return (n)}
    return (0-n);
}

def getManDiff(p1:P, p2:P) {
   let dX = abs((p1.x - p2.x))
   let dY = abs((p1.y - p2.y))
   return (dX+dY)
}

main{getDiff(new P(), new P(1, 2))}

-----
struct P2D{
    x=aFloat
    y=aFloat
}

struct P3D{
    x=aFloat
    y=aFloat
    z=aFloat
}

def abs(n){
    if(n>=0){
        return (n)
    }
    return (0-n)
}

def getManDiff(p1, p2) {
   let dX = abs((p1.x - p2.x))
   let dY = abs((p1.y - p2.y))
   return (dX+dY)
}

main{
    getManDiff(new P2D(), new P3D(1.5, 2.5, -2.0))
}